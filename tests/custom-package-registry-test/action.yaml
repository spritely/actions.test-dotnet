name: Test custom package registry can be used
description: Test to validate that a custom package registry can be used

runs:
  using: composite
  steps:
    - name: Initialize test
      shell: bash
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        initialize_test Test custom package registry can be used" "custom-package-registry-test"

    - name: Prepare test environment
      shell: bash
      run: |
        # Build and publish a test package
        # Test project will pull this package during the test run
        # If it can, then we know the devcontainer can pull packages from private registries
        cd "${{ github.workspace }}/tests/custom-package-registry-test/TestPackage"
        dotnet pack -c Release -o "${{ github.workspace }}/tests/custom-package-registry-test/nupkg"
        dotnet nuget push "${{ github.workspace }}/tests/custom-package-registry-test/nupkg/PublishProject.1.0.0.nupkg" --api-key fake-token --source http://localhost:5001/v3/index.json

    - id: test
      name: Run test-dotnet action
      uses: ./
      with:
        nugetAuthToken: fake-token
        unitTestProjects: ./tests/custom-package-registry-test/**/*.UnitTests.csproj
        coverageThreshold: 0
        publishResults: false

    - name: Assert package restore succeeded
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        set_test_name "Assert NuGet restore succeeded"

        # If the main action step was successful
        # Then the test project build and test was successful
        # And the PublishProject package was pulled from the package registry successfully
        if [ "${{ steps.test.outcome }}" == "success" ]; then
            success "NuGet package restore succeeded"
        else
            failure "NuGet package restore failed"
        fi

    - name: Finalize test
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        finalize_test
