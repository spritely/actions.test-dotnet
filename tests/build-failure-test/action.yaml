name: Test dotnet fails when build has compilation errors
description: Test to validate that build step catches compilation errors early

runs:
  using: composite
  steps:
    - name: Initialize test
      shell: bash
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        initialize_test "Test dotnet fails when build has compilation errors" "build-failure-test"

    - id: test
      name: Run test-dotnet action
      uses: ./
      with:
        nugetAuthToken: fake-token
        projectFile: ./tests/sample-projects/broken-compile/TestProject.UnitTests/TestProject.UnitTests.csproj
        unitTestProjects: ./tests/sample-projects/broken-compile/**/*.UnitTests.csproj
        coverageThreshold: 10
        writeSummary: false
      continue-on-error: true # We expect this to fail

    - name: Assert action failed due to build error
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        set_test_name "Assert action failed due to build error"

        if [ "${{ steps.test.outcome }}" == "failure" ]; then
            success "Action correctly failed due to compilation error"
        else
            failure "Action should have failed due to compilation error but didn't"
        fi

    - name: Assert no coverage data when build fails
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        set_test_name "Assert no coverage data when build fails"

        # When build fails, coverage should be 0 and threshold should be true (no tests ran)
        if [ "${{ steps.test.outputs.lineCoverage }}" == "0" ] && [ "${{ steps.test.outputs.coverageThresholdMet }}" == "true" ]; then
            success "Coverage outputs correct for build-failure scenario"
        else
            failure "Coverage outputs incorrect: lineCoverage=${{ steps.test.outputs.lineCoverage }}, thresholdMet=${{ steps.test.outputs.coverageThresholdMet }}"
        fi

    - name: Finalize test
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        finalize_test
