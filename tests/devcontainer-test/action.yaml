name: Test dotnet runs from a devcontainer
description: Test to validate that test dotnet runs from a devcontainer

runs:
  using: composite
  steps:
    - name: Initialize test
      shell: bash
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        initialize_test "Test dotnet runs from a devcontainer" "devcontainer-test"

    - name: Prepare test environment
      shell: bash
      run: |
        mkdir -p "${{ github.workspace }}/tests/devcontainer-test/logs"

        # Back up existing .devcontainer
        if [ -d "${{ github.workspace }}/.devcontainer" ]; then
          mv "${{ github.workspace }}/.devcontainer" "${{ github.workspace }}/.devcontainer.bak"
        fi

        # Copy our test .devcontainer to the root
        cp -r "${{ github.workspace }}/tests/devcontainer-test/.devcontainer" "${{ github.workspace }}/"

        # Back up the original test-dotnet.sh
        if [ -f "${{ github.workspace }}/test-dotnet.sh" ]; then
            cp "${{ github.workspace }}/test-dotnet.sh" "${{ github.workspace }}/test-dotnet.sh.bak"
        fi

        # Replace with our mock version
        cp "${{ github.workspace }}/tests/devcontainer-test/test-dotnet.sh" "${{ github.workspace }}/test-dotnet.sh"

        # Create and push test container image
        docker build -t localhost:5000/devcontainer-test-devcontainer:latest \
            -f ${{ github.workspace }}/tests/devcontainer-test/devcontainer-to-publish/Dockerfile \
            ${{ github.workspace }}/tests/devcontainer-test/devcontainer-to-publish/

        docker login localhost:5000 -u testuser -p testpassword
        docker push localhost:5000/devcontainer-test-devcontainer:latest

    - name: Run test-dotnet action
      uses: ./
      with:
        registryHost: localhost:5000
        registryUsername: testuser
        registryPassword: testpassword
        nugetAuthToken: fake-token
        unitTestProjects: tests/devcontainer-test/**/*.UnitTests.csproj
        coverageThreshold: 0
        publishResults: false

    - name: Assert custom devcontainer was used
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        set_test_name "Assert custom devcontainer was used"

        log_file="${{ github.workspace }}/tests/devcontainer-test/logs/devcontainer.log"

        if [ -f "$log_file" ]; then
            if grep -q "CUSTOM_DEVCONTAINER: devcontainer-test-container" "$log_file"; then
                success "Custom devcontainer was used"
            else
                failure "Custom devcontainer marker not found in logs"
            fi
            cat "$log_file"
        else
            failure "Devcontainer log file not found"
            ls -la "${{ github.workspace }}/tests/devcontainer-test/logs/"
        fi

    - name: Assert test script was called with expected arguments
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        set_test_name "Assert test script was called with expected arguments"

        log_file="${{ github.workspace }}/tests/devcontainer-test/logs/test-dotnet.log"

        if [ -f "$log_file" ]; then
            if grep -Fq "test-dotnet.sh: tests/devcontainer-test/**/*.UnitTests.csproj" "$log_file"; then
                success "test-dotnet.sh called with expected arguments"
            else
                failure "test-dotnet.sh was called with unexpected arguments"
            fi
            cat "$log_file"
        else
            failure "test-dotnet log file not found"
            ls -la "${{ github.workspace }}/tests/devcontainer-test/logs/"
        fi

    - name: Assert test script was called with expected NUGET_USER
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        set_test_name "Assert test script was called with expected NUGET_USER"

        log_file="${{ github.workspace }}/tests/devcontainer-test/logs/test-dotnet.log"

        if [ -f "$log_file" ]; then
            if grep -Fq "NUGET_USER: ${{ github.actor }}" "$log_file"; then
                success "test-dotnet.sh received expected NUGET_USER"
            else
                failure "test-dotnet.sh did not receive expected NUGET_USER"
            fi
            cat "$log_file"
        else
            failure "test-dotnet log file not found"
            ls -la "${{ github.workspace }}/tests/devcontainer-test/logs/"
        fi

    - name: Assert test script was called with expected NUGET_TOKEN
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        set_test_name "Assert test script was called with expected NUGET_TOKEN"

        log_file="${{ github.workspace }}/tests/devcontainer-test/logs/test-dotnet.log"

        if [ -f "$log_file" ]; then
            if grep -Fq "NUGET_TOKEN: fake-token" "$log_file"; then
                success "test-dotnet.sh received expected NUGET_TOKEN"
            else
                failure "test-dotnet.sh did not receive expected NUGET_TOKEN"
            fi
            cat "$log_file"
        else
            failure "test-dotnet log file not found"
            ls -la "${{ github.workspace }}/tests/devcontainer-test/logs/"
        fi

    - name: Clean up test environment
      shell: bash
      if: always()
      run: |
        # Restore original .devcontainer
        rm -rf "${{ github.workspace }}/.devcontainer"
        if [ -d "${{ github.workspace }}/.devcontainer.bak" ]; then
          mv "${{ github.workspace }}/.devcontainer.bak" "${{ github.workspace }}/.devcontainer"
        fi

        # Restore the original test-dotnet.sh
        if [ -f "${{ github.workspace }}/test-dotnet.sh.bak" ]; then
            mv "${{ github.workspace }}/test-dotnet.sh.bak" "${{ github.workspace }}/test-dotnet.sh"
        fi

    - name: Finalize test
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        finalize_test
