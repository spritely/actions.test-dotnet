name: Test dotnet produces code coverage report
description: Test to validate that test dotnet produces code coverage report

runs:
  using: composite
  steps:
    - name: Initialize test
      shell: bash
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        initialize_test "Test dotnet produces code coverage report" "code-coverage-test"

    - name: Prepare test environment
      shell: bash
      run: |
        mkdir -p "${{ github.workspace }}/covered-test-results/"

        # Copy the mock coverage report from the test resources
        cp -r "${{ github.workspace }}/tests/code-coverage-test/covered-test-results/." "${{ github.workspace }}/covered-test-results/"

        # Back up the original test-dotnet.sh
        if [ -f "${{ github.workspace }}/test-dotnet.sh" ]; then
            cp "${{ github.workspace }}/test-dotnet.sh" "${{ github.workspace }}/test-dotnet.sh.bak"
        fi

        # Replace with our mock version
        cp "${{ github.workspace }}/tests/code-coverage-test/test-dotnet.sh" "${{ github.workspace }}/test-dotnet.sh"

    - id: test
      name: Run test-dotnet action
      uses: ./
      with:
        nugetAuthToken: fake-token
        unitTestProjects: "./tests/code-coverage-test/**/*.UnitTests.csproj"
        coverageThreshold: "50"
        publishResults: false

    - name: Assert coverage result was published
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        set_test_name "Assert coverage result was published"

        # Check if we got a coverage result
        if [ -n "${{ steps.test.outputs.lineCoverage }}" ]; then
            if [ "${{ steps.test.outputs.lineCoverage }}" == "50" ]; then
                success "Coverage result was published correctly: ${{ steps.test.outputs.lineCoverage }}%"
            else
                failure "Coverage result was published but with unexpected value: ${{ steps.test.outputs.lineCoverage }}%"
            fi
        else
            failure "Coverage result was not published (no output value)"
        fi

    - name: Assert coverage threshold check passed
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        set_test_name "Assert coverage threshold check passed"

        if [ "${{ steps.test.outputs.coverageThresholdMet }}" == "true" ]; then
            success "Coverage threshold check passed"
        else
            failure "Coverage threshold check failed when it should have passed"
        fi

    - name: Clean up test environment
      shell: bash
      if: always()
      run: |
        # Restore the original test-dotnet.sh
        if [ -f "${{ github.workspace }}/test-dotnet.sh.bak" ]; then
            mv "${{ github.workspace }}/test-dotnet.sh.bak" "${{ github.workspace }}/test-dotnet.sh"
        fi

    - name: Finalize test
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        finalize_test
